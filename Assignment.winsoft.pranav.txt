// Q 1)  Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.//


import java.util.Arrays;

class Main {
    private static void merge(int[] X, int[] Y, int m, int n) {
        int k = m + n + 1;
        while (m >= 0 && n >= 0) {
            
            if (X[m] > Y[n]) {
                X[k--] = X[m--];
            } else {
                X[k--] = Y[n--];
            }
        }

        while (n >= 0) {
            X[k--] = Y[n--];
        }
    }

    public static void rearrange(int[] X, int[] Y) {
        
        if (X.length == 0) {
            return;
        }

        int k = 0;
        for (int value : X) {
            if (value != 0) {
                X[k++] = value;
            }
        }
        merge(X, Y, k - 1, Y.length - 1);
    }

    public static void main(String[] args) {
        
        int[] X = {0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] Y = {1, 8, 9, 10, 15};

        rearrange(X, Y);

        System.out.println(Arrays.toString(X));
    }
}



//
Q 2) Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements. //


public class MaxSumPath {
    public static int maxSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        int i = 0, j = 0;
        int sum1 = 0, sum2 = 0;
        int result = 0;

        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                sum1 += X[i];
                i++;
            } else if (X[i] > Y[j]) {
                sum2 += Y[j];
                j++;
            } else {
                result += Math.max(sum1, sum2) + X[i];
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
        }

        while (i < m) {
            sum1 += X[i];
            i++;
        }

        while (j < n) {
            sum2 += Y[j];
            j++;
        }

        result += Math.max(sum1, sum2);
        return result;
    }

    public static void main(String[] args) {
        int[] X = {3, 6, 7, 8, 10, 12, 15, 18, 100};
        int[] Y = {1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50};
        System.out.println("The maximum sum path is: " + maxSumPath(X, Y));
    }
}
//
Q.3) Write a Java Program to count the number of words in a string using HashMap.//


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class WordCounter {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter your string:");
        String input = scanner.nextLine();

        Map<String, Integer> wordCounts = countWords(input);

        System.out.println("Occurrences of each word:");
        for (Map.Entry<String, Integer> entry : wordCounts.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    public static Map<String, Integer> countWords(String input) {
        Map<String, Integer> wordCountMap = new HashMap<>();

        String[] words = input.split("\\s+");

        for (String word : words) {
            word = word.toLowerCase();
            wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
        }
        
        System.out.println("count of words : "+ words.length);

        return wordCountMap;
    }
}



//
Q 4) Write a Java Program to find the duplicate characters in a string.//

public class DuplicateCharacters {
    public static void main(String[] args) {
        String string1 = "My sirg Education services";
        int count;
        
        char[] string = string1.toCharArray();
        
        System.out.println("Duplicate characters in the given string:");
        
        boolean[] visited = new boolean[string.length];
        
        for (int i = 0; i < string.length; i++) {
            count = 1;
            for (int j = i + 1; j < string.length; j++) {
                if (string[i] == string[j] && !visited[j] && string[i] != ' ') {
                    count++;
                    visited[j] = true;
                }
            }
           
            if (count > 1 && !visited[i] && string[i] != ' ') {
                System.out.print(string[i] + " ");
            }
        }
    }
}
